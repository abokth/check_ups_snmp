#!/bin/bash
#########################################################
#							#
#		SNMP UPS Check				#
#							#
# check_ups_snmp					#
#							#
# Modified by Jason Leonard				#
#	E-mail: jason_leonard@yahoo.com			#
#							#
# Modified by Alexander Boström				#
#	E-mail: abo@kth.se				#
#							#
#							#
# Overview						#
# ----------------------------------------------------	#
# This plugin is a rewrite of the SNMP UPS check prov-	#
# ided by Daniel Dueñas.				#
#							#
# This program is free software; you can redistribute	#
# it and/or modify it under the terms of the GNU	#
# General Public License as published by the Free	#
# Software Foundation; either version 2 of the License,	#
# or (at your option) any later	version.		#
#							#
# This program is distributed in the hope that it will	#
# be useful, but WITHOUT ANY WARRANTY; without even the	#
# implied warranty of MERCHANTABILITY or FITNESS FOR A	#
# PARTICULAR PURPOSE.					#
#							#
# See the GNU General Public License for more details.	#
#							#
# You should have received a copy of the GNU General	#
# Public License along with this program; if not,	#
# write to:						#
#	Free Software Foundation, Inc.			#
#	51 Franklin St, Fifth Floor			#
#	Boston, MA  02110-1301  USA			#
#							#
#########################################################

set -e; set -o pipefail

## Constants ##

APPNAME=$(basename $0)

HOMEPAGE="https://github.com/abokth/check_ups_snmp"
AUTHOR="Alexander Boström (abo@kth.se)"

# Default settings for connection
COMMUNITY='public'
HOST_NAME='localhost'
SNMPVERSION='2c'
MIBS_PATH="./mibs"

# State Variables
STATE_OK=0
STATE_WARN=1
STATE_CRIT=2
STATE_UNK=3

# Default Outputs
STATE=$STATE_OK
STATE_STRING=""
OUTPUT=""
PERFDATA=""

# Change this to modify the script's handling of how it separates
# each consumable/tray when multiple checks are output.
# SEPARATOR="\n"
SEPARATOR=","

print_version() {
    echo "$APPNAME $HOMEPAGE"
    echo "$AUTHOR"
    echo ''
}

print_usage() {
    echo ''
    echo 'Usage for SNMP v1/2c:'
    echo "	$APPNAME -H <host/IP> -t <type of check> [-C <SNMP community>] [-S <character>] [-w <warning value>] [-c <critical value>]"
    echo ''
    echo 'Usage for SNMP v3:'
    echo "	$APPNAME -H <host/IP> -t <type of check> -u <user> -x <protocol> -X <password> -a <protocol> -A <password> -l <security mode> [-S <character>] [-w <warning value>] [-c <critical value>]"
    echo ''
}

print_help() {
    print_version
    echo 'Description:'
    echo "$APPNAME is a Nagios plugin to check SAI or UPS status with CS121 and other SNMP card adapters."
    echo 'This plugin is not developped by the Nagios Plugin group.'
    echo 'Please do not e-mail them for support on this plugin.'
    echo ''
    echo 'For contact info, please read the plugin script file.'
    echo ''
    print_usage
    echo '---------------------------------------------------------------------'
    echo ''
    echo 'OPTIONS:'
    echo '	-H|--host'
    echo '		Host name or IP address to check. Default is: localhost.'
    echo '	-v|--snmpversion {1 | 2c | 3 }'
    echo "		Specifies the SNMP version to use. Default is '2c'."
    echo '	-C|--community'
    echo "		SNMP v2 community string with Read access. Default is 'public'"
    echo '	-u|--user'
    echo '		SNMP v3 username'
    echo '	-l|--privlevel { noAuthNoPriv | authNoPriv | authPriv }'
    echo '		SNMP v3 privilege level'
    echo '	-x|--privprotocol { DES | AES }'
    echo '		SNMP v3 privacy protocol'
    echo '	-X|--privpassword'
    echo '		SNMP v3 privacy password'
    echo '	-a|--authprotocol { MD5 | SHA }'
    echo '		SNMP v3 authentication protocol'
    echo '	-A|--authpassword'
    echo '		SNMP v3 authentication password'
    echo '	-d|--dir'
    echo "		MIBs files directory ('./mibs' by default)"
    echo '	-t|--type { alarm | asset | charge | input_lines | output_lines | load | selftest | status | temp | voltage }'
    echo '		The check you want to perform for the UPS'
    echo '		REQUIRED OPTION'
    echo '	-w|--warning'
    echo '		Assign warning value for relevant check(s)'
    echo '	-c|--critical'
    echo '		Assign critical value for relevant check(s)'
    echo '	-S|--separator <text string>'
    echo '		Assign a particular string as the separator for consumables.'
    echo '		Default is , to conform to Nagios plugin development guidelines'
    echo '	-h|--help'
    echo '		Show help'
    echo '	-V|--version'
    echo '		Show version'
    echo ''
    echo 'CHECK TYPES:'
    echo '	alarm:'
    echo '		The number of active alarm conditions. If zero, status is OK, otherwise'
    echo '		status is CRITICAL. When an alarm is present, the plugin will show'
    echo '		the time and description for the alarm, but only if the UPS MIB files'
    echo '		are available. You can specify the path to the MIBs with the -d option'
    echo '		(by default, ./mibs is checked).'
    echo ''
    echo '	asset:'
    echo '		Returns the make, model, firmware and serial # of the unit'
    echo '		No perfdata is included in this check.'
    echo ''
    echo '	charge:'
    echo '		Estimated battery charge remaining, expressed as a % of full charge and time, in minutes.'
    echo '		WARNING and CRITICAL values are required! These values should be provided as % charge.'
    echo ''
    echo '	input_lines:'
    echo '		The number of input lines utilized in this device.'
    echo ''
    echo '	load:'
    echo '		The percentage of the UPS capacity being used on the output line,'
    echo '		i.e., the greater of the % capacity load and the % VA load.'
    echo '		WARNING and CRITICAL values required! These values should be provided as % load.'
    echo ''
    echo '	output_lines:'
    echo '		The number of output lines utilized in this device.'
    echo ''
    echo '	selftest:'
    echo '		The results of the most recent UPS self-test. Returns CRITICAL if the test failed.'
    echo ''
    echo '	status:'
    echo "		The indication of the capacity remaining in the UPS system's batteries."
    echo '		Normal indicates the remaining run-time is > upsConfigLowBattTime.'
    echo '		batteryLow indicates the remaining run-time is <= upsConfigLowBattTime.'
    echo '		batteryDepleted indicates the UPS will be unable to sustain the present load if utility power is lost or absent.'
    echo '		No perfdata is included in this check.'
    echo ''
    echo '	atemp|ambient:'
    echo '		The ambient temperature at the temperature probe, if installed.'
    echo '		WARNING and CRITICAL values are required! These values should be provided as degrees C.'
    echo ''
    echo '	btemp|temp:'
    echo '		The ambient temperature at or near the UPS Battery casing.'
    echo '		WARNING and CRITICAL values are required! These values should be provided as degrees C.'
    echo ''
    echo '	voltage:'
    echo '		The magnitude of the present input voltage in the input lines.'
    echo '		WARNING interval and CRITICAL values are required!'
    echo '		These values should be provided using an interval, marked by a :'
    echo ''
    echo '		Example: If the normal value is 400 V, a reasonable WARNING might be 395-405 V'
    echo '		(a change of 5 V) and a good CRITICAL would be 390-410 V (a change of 10 V)/'
    echo '		Example: ./$APPNAME -H 10.40.80.1 -p voltage -w 395:405 -c 390:410'
    echo ''

    exit $STATE_UNK
}

## Universal SNMP OIDS for UPS ##

#Add check for Battery (Model / Needs Replaced?)
#---> integrate this with "Status"

# Transfer Low = 1.3.6.1.4.1.318.1.1.1.5.2.3.0		106
# Tranfer High = 1.3.6.1.4.1.318.1.1.1.5.2.2.0		127
# Transfer Reason = 1.3.6.1.4.1.318.1.1.1.3.2.5.0	1
#{ 1, "noTransfer" }
#{ 2, "highLineVoltage" }
#{ 3, "brownout" }
#{ 4, "blackout" }
#{ 5, "smallMomentarySag" }
#{ 6, "deepMomentarySag" }
#{ 7, "smallMomentarySpike" }
#{ 8, "largeMomentarySpike" }
#{ 9, "selfTest" }
#{ 10, "rateOfVoltageChange" }

# -------------------------
# Asset Info.
# -------------------------
# UPS Manufacturer
OID_upsIdentManufacturer='1.3.6.1.2.1.33.1.1.1.0'

# UPS Model Description
# -------------------------
OID_upsIdentModel='1.3.6.1.2.1.33.1.1.2.0'
# APC = '1.3.6.1.4.1.318.1.1.1.1.1.1.0'

# UPS Firmware
# -------------------------
OID_upsIdentUPSSoftwareVersion='1.3.6.1.2.1.33.1.1.3.0'
# APC = '1.3.6.1.4.1.318.1.1.1.1.2.1.0'

# Identifying Name
# -------------------------
OID_upsIdentName='1.3.6.1.2.1.33.1.1.5.0'
# APC = '1.3.6.1.4.1.318.1.1.1.1.1.2.0'

# Serial # (APC-specific)
# -------------------------
OID_upsAdvIdentSerialNumber='1.3.6.1.4.1.318.1.1.1.1.2.3.0'

# Part # (APC-specific)
# -------------------------
OID_upsBasicIdentModel='1.3.6.1.4.1.318.1.1.1.1.2.5.0'


# -------------------------
# Battery Use Info.
# -------------------------

# Replacement Battery Model
# APC = '1.3.6.1.4.1.318.1.1.1.2.2.19.0'

# Battery Needs Replaced?
# INTEGER = 1
# 1 = No, 2 = Yes
OID_upsAdvBatteryReplaceIndicator='1.3.6.1.4.1.318.1.1.1.2.2.4.0'

# Battery Status
OID_upsBatteryStatus='1.3.6.1.2.1.33.1.2.1.0'
# APC = '1.3.6.1.4.1.318.1.1.1.2.1.1.0'

# Battery Time Used
# OID_upsSecondsOnBattery='1.3.6.1.2.1.33.1.2.2.0'
# APC = '1.3.6.1.4.1.318.1.1.1.2.1.2.0'

# Battery Time Left
OID_upsEstimatedMinutesRemaining='1.3.6.1.2.1.33.1.2.3.0'
# APC = '1.3.6.1.4.1.318.1.1.1.2.2.3.0'

# Battery Charge Left
OID_upsEstimatedChargeRemaining='1.3.6.1.2.1.33.1.2.4.0'
# APC = '1.3.6.1.4.1.318.1.1.1.2.2.1.0'

# -------------------------
# Battery Load Info.
# -------------------------

# Battery Voltage
# OID_upsBatteryVoltage='1.3.6.1.2.1.33.1.2.5.0'

# Battery Current
# OID_upsBatteryCurrent='1.3.6.1.2.1.33.1.2.6.0'

# Battery Temperature
OID_upsBatteryTemperature='1.3.6.1.2.1.33.1.2.7.0'
# APC = '1.3.6.1.4.1.318.1.1.1.2.2.2.0'

# Input Lines
OID_upsInputNumLines='1.3.6.1.2.1.33.1.3.2.0'

# Input Frequency
# OID_upsInputFrequency='1.3.6.1.2.1.33.1.3.3.1.2'
# APC = '1.3.6.1.4.1.318.1.1.1.3.2.4.0'

# Input Voltage
OID_upsInputVoltage='1.3.6.1.2.1.33.1.3.3.1.3'
# APC = '1.3.6.1.4.1.318.1.1.1.3.2.1.0'

# Input Current
# OID_upsInputCurrent='1.3.6.1.2.1.33.1.3.3.1.4'

# Input Power
# OID_upsInputTruePower='1.3.6.1.2.1.33.1.3.3.1.5'

# Output Frequency
# OID_upsOutputFrequency='1.3.6.1.2.1.33.1.4.2.0'
# APC = '1.3.6.1.4.1.318.1.1.1.4.2.2.0'

# Output Lines
OID_upsOutputNumLines='1.3.6.1.2.1.33.1.4.3.0'

# Output Voltage
# OID_upsOutputVoltage='1.3.6.1.2.1.33.1.4.4.1.2'
# APC = '1.3.6.1.4.1.318.1.1.1.4.2.1.0'

# Output Current
# OID_upsOutputCurrent='1.3.6.1.2.1.33.1.4.4.1.3'
# APC = '1.3.6.1.4.1.318.1.1.1.4.2.4.0'

# Output Power
# OID_upsOutputPower='1.3.6.1.2.1.33.1.4.4.1.4'

# Output Load
OID_upsOutputPercentLoad='1.3.6.1.2.1.33.1.4.4.1.5'
# APC = '1.3.6.1.4.1.318.1.1.1.4.2.3.0'

# Output Status
# APC = '1.3.6.1.4.1.318.1.1.1.4.1.1.0'

# -------------------------
# Battery Alarms
# -------------------------
OID_upsAlarmsPresent='1.3.6.1.2.1.33.1.6.1.0'
OID_upsAlarmDescr='1.3.6.1.2.1.33.1.6.2.1.2'
OID_upsAlarmTime='1.3.6.1.2.1.33.1.6.2.1.3'

# -------------------------
# Battery Self Test
# -------------------------
OID_upsTestResult='1.3.6.1.4.1.318.1.1.1.7.2.3.0'
OID_upsTestDate='1.3.6.1.4.1.318.1.1.1.7.2.4.0'

# -------------------------
# Temp & Humidity Sensor
# -------------------------
OID_iemStatusProbeName='1.3.6.1.4.1.318.1.1.10.2.3.2.1.2.1'
OID_iemStatusProbeCurrentTemp='1.3.6.1.4.1.318.1.1.10.2.3.2.1.4.1'
OID_iemStatusProbeCurrentHumid='1.3.6.1.4.1.318.1.1.10.2.3.2.1.6.1'


CheckAssetInfo() {
    #get_snmp $OID_upsIdentManufacturer
    #local make="$RESULT_TEXT"

    get_snmp $OID_upsIdentModel
    local model="$RESULT_TEXT"

    #get_snmp $OID_upsIdentUPSSoftwareVersion
    #local firmware="$RESULT_TEXT"

    get_snmp $OID_upsAdvIdentSerialNumber
    local serial_num="$RESULT_TEXT"

    get_snmp $OID_upsBasicIdentModel
    local product="$RESULT_TEXT"

    #!!! How to get firmware to handle the spaces / special characters???
    OUTPUT="$NAME $model"
    if [[ "$product" != "No Such Object available on this agent at this OID" ]]; then
	OUTPUT="$OUTPUT ($product)"
    fi
    if [[ "$serial_num" != "No Such Object available on this agent at this OID" ]]; then
	OUTPUT="$OUTPUT, Serial # $serial_num"
    fi
}

CheckSelfTest() {
    get_snmp $OID_upsTestDate
    local test_date="$RESULT_TEXT"

    get_snmp_numneric $OID_upsTestResult
    PERFDATA="test_result=$RESULT_TEXT"

    case $RESULT_TEXT in
	1) OUTPUT="Self-test on $test_date passed!"
	   STATE=$STATE_OK; return
	   ;;
	2) OUTPUT="Self-test on $test_date failed!"
	   STATE=$STATE_CRIT; return
	   ;;
	3) OUTPUT="Self-test on $test_date invalid!"
	   STATE=$STATE_UNK; return
	   ;;
	4) OUTPUT="Self-test on $test_date in progress!"
	   STATE=$STATE_UNK; return
	   ;;
    esac

    OUTPUT="Self-test on $test_date UNKNOWN"
    STATE=$STATE_UNK
}

CheckInputLines() {
    get_snmp_numeric $OID_upsInputNumLines
    OUTPUT="Number of input lines = $RESULT_TEXT"
    PERFDATA="lines=$RESULT_TEXT"
}

CheckOutputLines() {
    get_snmp_numeric $OID_upsOutputNumLines
    OUTPUT="Number of output lines = $RESULT_TEXT"
    PERFDATA="lines=$RESULT_TEXT"
}

CheckUPSAlarm() {
    local alarm_text=""
    local alarm_desc=""
    local oid_alarm_desc alarm_time
    local -i counter

    get_snmp_numeric $OID_upsAlarmsPresent
    local -i number_alarms="$RESULT_TEXT"

    if (( number_alarms == 0 )); then
	STATE=$STATE_OK
	OUTPUT="No alarms present."
    elif (( number_alarms > 0 )); then
	STATE=$STATE_CRIT

	counter=1
	while (( counter <= number_alarms )); do
	    get_snmp $OID_upsAlarmDescr.$counter
	    oid_alarm_desc="$RESULT_TEXT"

	    alarm_desc=$(snmptranslate -M $MIBS_PATH -m ALL $oid_alarm_desc | awk -F:: '{print $2}') || alarm_desc=""
	    if [[ -z "$alarm_desc" ]]; then
		alarm_desc=$oid_alarm_desc
	    fi

	    get_snmp $OID_upsAlarmTime.$counter
	    alarm_time="$RESULT_TEXT"

	    # work on checking return codes and use if/then so output fits what's available

	    alarm_text="$alarm_text Alarm $counter: $alarm_desc $alarm_time"
	    counter=$((counter + 1))
	done

    else
	STATE=$STATE_UNK
    fi

    OUTPUT="$number_alarms alarms present.$alarm_text"
    PERFDATA="alarms=$number_alarms"
}

CheckAmbientTemp() {
    if (( $WARNING == 0 )) || (( $CRITICAL == 0 )); then
	echo "No WARNING or CRITICAL value specified!"
	exit $STATE_UNK
    fi

    get_snmp $OID_iemStatusProbeName
    local probe_name="$RESULT_TEXT"

    get_snmp_numeric $OID_iemStatusProbeCurrentTemp
    local -i ambient_temp="$RESULT_TEXT"
    #temp_fahrenheit=$((9 * $ambient_temp / 5 + 32))
    local temp_fahrenheit=$( <<<"scale=1;9*$ambient_temp/5+32" bc -l )

    get_snmp_numeric $OID_iemStatusProbeCurrentHumid
    local -i humidity_value="$RESULT_TEXT"

    OUTPUT="$probe_name: $ambient_temp degrees C ($temp_fahrenheit degrees F), $humidity_value % humidity."
    PERFDATA="temperature=$ambient_temp;$WARNING;$CRITICAL"

    if (( ambient_temp > $CRITICAL )); then
	STATE=$STATE_CRIT
    elif (( ambient_temp >= $WARNING )); then
	STATE=$STATE_WARN
    elif (( ambient_temp < $WARNING )); then
	STATE=$STATE_OK
    else
	STATE=$STATE_UNK
    fi
}

CheckBatteryTemp() {
    if (( $WARNING == 0 )) || (( $CRITICAL == 0 )); then
	echo "No WARNING or CRITICAL value specified!"
	exit $STATE_UNK
    fi

    get_snmp_numeric $OID_upsBatteryTemperature
    local -i battery_temp="$RESULT_TEXT"
    #	temp_fahrenheit=$((9 * battery_temp / 5 + 32))
    local temp_fahrenheit=$( <<<"scale=1;9*$battery_temp/5+32" bc -l)

    OUTPUT="Battery Temperature is $battery_temp degrees C ($temp_fahrenheit degrees F)."
    PERFDATA="temperature=$battery_temp;$WARNING;$CRITICAL"

    if (( battery_temp > $CRITICAL )); then
	STATE=$STATE_CRIT
    elif (( battery_temp >= $WARNING )); then
	STATE=$STATE_WARN
    elif (( battery_temp < $WARNING )); then
	STATE=$STATE_OK
    else
	STATE=$STATE_UNK
    fi
}

CheckOutputLoad() {
    STATE=$STATE_OK

    if (( $WARNING == 0 )) || (( $CRITICAL == 0 )); then
	echo "No WARNING or CRITICAL value specified!"
	print_usage
	exit $STATE_UNK
    fi

    get_snmp_numeric $OID_upsOutputNumLines
    local -i number_lines="$RESULT_TEXT"

    if (( number_lines <= 0 )); then
	echo "Error! Number of lines=$number_lines"
	exit $STATE_UNK
    fi

    local -i counter=1
    local -a percent_load

    while (( counter <= number_lines )); do
	get_snmp_numeric $OID_upsOutputPercentLoad.$counter
	percent_load[$counter]="$RESULT_TEXT"

	counter=$((counter + 1))
    done

    OUTPUT="Load % on $number_lines lines:"
    local flag=0

    local -i pl
    counter=1
    for pl in "${percent_load[@]}"; do
	if (( pl > $CRITICAL )); then
	    STATE=$STATE_CRIT
	    flag=3
	elif (( pl > $WARNING )); then
	    if (( $flag <= 2 )); then
		STATE=$STATE_WARN
		flag=2
	    fi
	elif (( pl <= $WARNING )); then
	    if (( $flag <= 0 )); then
		STATE=$STATE_OK
	    fi
	else
	    if (( $flag <= 1 )); then
		STATE=$STATE_UNK
		flag=1
	    fi
	fi

	OUTPUT=$OUTPUT" L$counter=${pl}%"
	PERFDATA="${PERFDATA}L$counter=${pl}%;$WARNING;$CRITICAL;0;100 "
	counter=$((counter + 1))
    done
}

CheckOutputLoadDiff() {
    if (( $WARNING == 0 )) || (( $CRITICAL == 0 )); then
	echo "No WARNING or CRITICAL value specified!"
	print_usage
	exit $STATE_UNK
    fi

    get_snmp_numeric $OID_upsOutputNumLines
    local -i number_lines="$RESULT_TEXT"

    if (( number_lines <= 0 )); then
	echo "Error! Number of lines=$number_lines"
	exit $STATE_UNK
    fi

    local -i counter=1

    local min=""
    local minline=""
    local max=""
    local maxline=""
    local -i line_percent_load

    while (( counter <= number_lines )); do
	get_snmp_numeric $OID_upsOutputPercentLoad.$counter
	line_percent_load="$RESULT_TEXT"

	if [[ -z "$min" ]] || (( "$min" > line_percent_load )); then
	    min="$line_percent_load"
	    minline="$counter"
	fi
	if [[ -z "$max" ]] || (( "$max" < line_percent_load )); then
	    max="$line_percent_load"
	    maxline="$counter"
	fi

	counter=$((counter + 1))
    done

    local -i loaddiff=$(($max - $min))

    OUTPUT="Minimum load L${minline}=${min}%. Maximum load L${maxline}=${max}%. Diff: $loaddiff"

    if (( loaddiff > $CRITICAL )); then
	STATE=$STATE_CRIT
    elif (( loaddiff > $WARNING )); then
	STATE=$STATE_CRIT
    else
	STATE=$STATE_OK
    fi

    PERFDATA="Ldiff=$loaddiff;$WARNING;$CRITICAL;0;100 "
}

CheckInputVoltage() {
    STATE=$STATE_OK

    if [[ -z "$WARNING" || -z "$CRITICAL" ]]; then
	echo "No WARNING or CRITICAL value specified!"
	print_usage
	exit $STATE_UNK
    fi

    get_snmp_numeric $OID_upsInputNumLines
    local -i number_lines="$RESULT_TEXT"

    if (( number_lines <= 0 )); then
	echo "Error! Number of lines=$number_lines"
	exit $STATE_UNK
    fi

    local -i counter=1
    local -a voltage

    while (( counter <= number_lines )); do
	get_snmp_numeric $OID_upsInputVoltage.$counter
	voltage[$counter]="$RESULT_TEXT"

	counter=$((counter + 1))
    done

    OUTPUT="Voltage on $number_lines input lines:"
    counter=1
    local -i flag=0
    local -i warning_up="${WARNING#*:}"
    local -i warning_down="${WARNING%:*}"
    local -i critical_up="${CRITICAL#*:}"
    local -i critical_down="${CRITICAL%:*}"

    local v
    for v in "${voltage[@]}"; do
	if (( v > critical_up )); then
	    STATE=$STATE_CRIT
	    flag=3
	elif (( v < critical_down )); then
	    STATE=$STATE_CRIT
	    flag=3
	elif (( v > warning_up )); then
	    if (( flag <= 2 )); then
		STATE=$STATE_WARN
		flag=2
	    fi
	elif (( v < warning_down )); then
	    if (( flag <= 2 )); then
		STATE=$STATE_WARN
		flag=2
	    fi
	elif (( v <= warning_up )); then
	    if (( flag <= 0 )); then
		STATE=$STATE_OK
	    fi
	else
	    if (( flag <= 1 )); then
		STATE=$STATE_UNK
		flag=1
	    fi
	fi

	OUTPUT=$OUTPUT" L$counter=${v}V"
	PERFDATA="${PERFDATA}L$counter=${v};$WARNING;$CRITICAL;; "
	counter=$((counter + 1))

    done
}

CheckBatteryStatus() {
    get_snmp_numeric $OID_upsBatteryStatus $OID_upsAdvBatteryReplaceIndicator
    case "$RESULT_TEXT" in
	1)	OUTPUT="Battery Status Unknown."
		STATE=$STATE_UNK; return
		;;
	2)	OUTPUT="Battery Status Normal."
		STATE=$STATE_OK; return
		;;
	3)	OUTPUT="Battery Status Low."
		STATE=$STATE_WARN; return
		;;
	4)	OUTPUT="Battery Status Depleted."
		STATE=$STATE_CRIT; return
		;;
    esac

    OUTPUT="Battery Status invalid."
    STATE=$STATE_UNK
}

CheckBatteryCharge() {
    if (( $WARNING == 0 )) || (( $CRITICAL == 0 )); then
	echo "No WARNING or CRITICAL value specified!"
	print_usage
	exit $STATE_UNK
    fi

    get_snmp_numeric $OID_upsEstimatedChargeRemaining
    local -i percent_charge="$RESULT_TEXT"

    get_snmp_numeric $OID_upsEstimatedMinutesRemaining
    local -i battery_charge="$RESULT_TEXT"

    local value_secs=$((battery_charge * 60))

    OUTPUT="Estimated battery charge $percent_charge%, approximately $battery_charge minutes runtime remaining."
    PERFDATA="charge=${percent_charge}%;$WARNING;$CRITICAL;; time_to_depleted=${value_secs}s;;;0;"

    if (( percent_charge <= $CRITICAL )); then
	STATE=$STATE_CRIT
    elif (( percent_charge <= $WARNING )); then
	STATE=$STATE_WARN
    elif (( percent_charge > $WARNING )); then
	STATE=$STATE_OK
    else
	STATE=$STATE_UNK
    fi
}

get_snmp() {
    local -a snmpget_command

    if [[ $SNMPVERSION == "3" ]]; then
	snmpget_command=("snmpget" "-v" "$SNMPVERSION" "-Oavq" "-u" "$SNMPUSER" "-l" "$PRIVILEGELEVEL" "-x" "$PRIVACYPROTOCOL" "-X" "$PRIVACYPASSWORD" "-a" "$AUTHPROTOCOL" "-A" "$AUTHPASSWORD" "$HOST_NAME" "$1")
    else
	snmpget_command=("snmpget" "-v" "$SNMPVERSION" "-Oavq" "-c" "$COMMUNITY" "$HOST_NAME" "$1")
    fi

    local try
    for try in 0 10 30 90; do
	sleep $try
	if RESULT_TEXT=$("${snmpget_command[@]}"); then
	    RESULT_TEXT="${RESULT_TEXT//\"}"
	    return 0
	fi
    done

    echo "Plugin $APPNAME failure - snmpget command error. ${RESULT_TEXT//\"}"
    exit $STATE_UNK
}

get_snmp_numeric() {
    get_snmp "$@"
    local -i result_number="$RESULT_TEXT"
    if [[ "$result_number" == "$RESULT_TEXT" ]]; then
	return 0
    fi

    echo "Plugin $APPNAME failure - snmpget result not numeric: $RESULT_TEXT"
    exit $STATE_UNK
}

get_snmp_numeric_positive() {
    local -i result_number try
    for try in 1 5 10 20 0; do
	get_snmp_numeric "$@"
	result_number="$RESULT_TEXT"
	if (( result_number > 0 )); then
	    return 0
	fi
	sleep $try
    done
    echo "Plugin $APPNAME failure - snmpget result not a positive number: $RESULT_TEXT"
    exit $STATE_UNK
done

## MAIN PROGRAM CODE ##

# Check that all required binaries for the script are available
#	EXIT with an UNKNOWN status if not
for required_binary in snmpget snmptranslate awk; do
    if type $required_binary >/dev/null; then
	:
    else
	echo "UNKNOWN: $APPNAME: No usable '$required_binary' binary in '$PATH'"
	exit $STATE_UNK
    fi
done


# Check to see if any parameters were passed
if (( $# == 0 )); then
    print_usage
    exit $STATE_UNK
fi

# Parse parameters and assign values to variable as needed
while [[ -n "$1" ]]; do

    case "$1" in
	--host|-H)
	    HOST_NAME=$2
	    shift
	    ;;
	--community|-C)
	    COMMUNITY=$2
	    shift
	    ;;
	--snmpversion|-v)
	    SNMPVERSION=$2
	    shift
	    ;;
	--user|-u)
	    SNMPUSER=$2
	    shift
	    ;;
	--privelegelevel|-l)
	    PRIVILEGELEVEL=$2
	    shift
	    ;;
	--authprotocol|-a)
	    AUTHPROTOCOL=$2
	    shift
	    ;;
	--authpassword|-A)
	    AUTHPASSWORD=$2
	    shift
	    ;;
	--privacyprotocol|-x)
	    PRIVACYPROTOCOL=$2
	    shift
	    ;;
	--privacypassword|-X)
	    PRIVACYPASSWORD=$2
	    shift
	    ;;
	--dir|-d)
	    MIBS_PATH=$2
	    shift
	    ;;
	--type|-t)
	    CHECK_TYPE=$2
	    shift
	    ;;
	--separator|-S) # Assign separator
	    SEPARATOR="$2"
	    shift
	    ;;
	--warning|-w)
	    WARNING=$2
	    shift
	    ;;
	--critical|-c)
	    CRITICAL=$2
	    shift
	    ;;
	--help|-h)
	    print_help
	    ;;
	--version|-V)
	    print_version
	    exit $STATE
	    ;;
	*)
	    echo "Unknown argument: $1"
	    print_usage
	    exit $STATE_UNK
	    ;;
    esac

    shift

done

if [[ -n "$CHECK_TYPE" ]]; then
    # Determine the check to perform
    case "$CHECK_TYPE" in
	alarm)
	    CheckUPSAlarm
	    ;;
	asset)
	    CheckAssetInfo
	    ;;
	atemp|ambient)
	    CheckAmbientTemp
	    ;;
	btemp|temp)
	    CheckBatteryTemp
	    ;;
	load)
	    CheckOutputLoad
	    ;;
	load_diff)
	    CheckOutputLoadDiff
	    ;;
	voltage)
	    CheckInputVoltage
	    ;;
	input_lines)
	    CheckInputLines
	    ;;
	output_lines)
	    CheckOutputLines
	    ;;
	selftest)
	    CheckSelfTest
	    ;;
	status)
	    CheckBatteryStatus
	    ;;
	charge)
	    CheckBatteryCharge
	    ;;
	*) # If no check was passed, or something is wrong, let's scram!
	    echo "Unknown parameter: $CHECK_TYPE"
	    print_usage
	    exit $STATE_UNK
	    ;;
    esac

    # Build output string to be returned to Nagios
    case $STATE in
	$STATE_OK) STATE_STRING="OK";;
	$STATE_WARN) STATE_STRING="WARNING";;
	$STATE_CRIT) STATE_STRING="CRITICAL";;
	$STATE_UNK) STATE_STRING="UNKNOWN";;
    esac

    if [[ -z "$PERFDATA" ]]; then
	echo "$STATE_STRING: $OUTPUT"
    else
	echo "$STATE_STRING: $OUTPUT|$PERFDATA"
    fi

else
    echo "Command incomplete!"
    STATE=$STATE_UNK
fi

exit $STATE
